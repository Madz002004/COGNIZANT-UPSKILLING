1. JavaScript Basics & Setup
HTML Setup:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Community Event Portal</title>
</head>
<body>
    <h1>Welcome to Our Community Portal</h1>
    <div id="events-container"></div>
    
    <script src="main.js"></script>
</body>
</html>
main.js:

javascript
// Basic setup and welcome message
console.log("Welcome to the Community Portal");

window.addEventListener('load', function() {
    alert("Page has fully loaded!");
});
2. Syntax, Data Types, and Operators
javascript
// Event details
const eventName = "Community Bake Sale";
const eventDate = new Date('2023-12-15');
let availableSeats = 50;

// Display event info
function displayEventInfo() {
    console.log(`Event: ${eventName} on ${eventDate.toDateString()}. Seats available: ${availableSeats}`);
}

// Register a user
function registerForEvent() {
    if (availableSeats > 0) {
        availableSeats--;
        console.log(`Registration successful! Seats left: ${availableSeats}`);
    } else {
        console.log("Sorry, this event is full.");
    }
}

displayEventInfo();
registerForEvent();
3. Conditionals, Loops, and Error Handling
javascript
const events = [
    { name: "Bake Sale", date: new Date('2023-12-15'), seats: 50, category: "Food" },
    { name: "Music Festival", date: new Date('2023-11-10'), seats: 0, category: "Music" },
    { name: "Art Workshop", date: new Date('2023-12-20'), seats: 30, category: "Art" },
    { name: "Tech Talk", date: new Date('2023-09-15'), seats: 20, category: "Tech" }
];

function displayValidEvents() {
    const currentDate = new Date();
    
    events.forEach(event => {
        try {
            if (event.date >= currentDate && event.seats > 0) {
                console.log(`${event.name} - ${event.date.toDateString()} (${event.seats} seats available)`);
            }
        } catch (error) {
            console.error(`Error processing event ${event.name}:`, error);
        }
    });
}

displayValidEvents();
4. Functions, Scope, Closures, Higher-Order Functions
javascript
// Event management functions
const eventManager = (function() {
    let allEvents = [];
    let categoryCounts = {};
    
    function addEvent(name, date, seats, category) {
        const newEvent = { name, date, seats, category };
        allEvents.push(newEvent);
        
        // Update category count using closure
        categoryCounts[category] = (categoryCounts[category] || 0) + 1;
    }
    
    function registerUser(eventName) {
        const event = allEvents.find(e => e.name === eventName);
        if (event && event.seats > 0) {
            event.seats--;
            return true;
        }
        return false;
    }
    
    function filterEventsByCategory(category, callback) {
        const filtered = allEvents.filter(e => e.category === category);
        callback(filtered);
    }
    
    function getCategoryCount(category) {
        return categoryCounts[category] || 0;
    }
    
    return {
        addEvent,
        registerUser,
        filterEventsByCategory,
        getCategoryCount
    };
})();

// Usage
eventManager.addEvent("Book Club", new Date('2023-12-10'), 15, "Literature");
console.log(eventManager.getCategoryCount("Literature")); // 1
5. Objects and Prototypes
javascript
// Event class definition
class Event {
    constructor(name, date, seats, category) {
        this.name = name;
        this.date = date;
        this.seats = seats;
        this.category = category;
    }
    
    checkAvailability() {
        return this.seats > 0 && this.date >= new Date();
    }
    
    static displayEventDetails(event) {
        const entries = Object.entries(event);
        entries.forEach(([key, value]) => {
            console.log(`${key}: ${value}`);
        });
    }
}

// Usage
const workshop = new Event("Coding Workshop", new Date('2023-12-05'), 25, "Tech");
console.log(workshop.checkAvailability()); // true
Event.displayEventDetails(workshop);
6. Arrays and Methods
javascript
const communityEvents = [
    { name: "Bake Sale", date: new Date('2023-12-15'), seats: 50, category: "Food" },
    { name: "Music Festival", date: new Date('2023-11-10'), seats: 0, category: "Music" },
    { name: "Art Workshop", date: new Date('2023-12-20'), seats: 30, category: "Art" }
];

// Add new event
communityEvents.push({ name: "Tech Talk", date: new Date('2023-12-18'), seats: 20, category: "Tech" });

// Filter music events
const musicEvents = communityEvents.filter(event => event.category === "Music");
console.log("Music Events:", musicEvents);

// Format display cards
const eventCards = communityEvents.map(event => ({
    title: `${event.category} Event: ${event.name}`,
    details: `Date: ${event.date.toDateString()} | Seats: ${event.seats}`
}));
console.log("Event Cards:", eventCards);
7. DOM Manipulation
javascript
// DOM elements
const eventsContainer = document.querySelector('#events-container');

// Function to create event card
function createEventCard(event) {
    const card = document.createElement('div');
    card.className = 'event-card';
    
    const title = document.createElement('h3');
    title.textContent = event.name;
    
    const date = document.createElement('p');
    date.textContent = `Date: ${event.date.toDateString()}`;
    
    const seats = document.createElement('p');
    seats.textContent = `Seats available: ${event.seats}`;
    
    const registerBtn = document.createElement('button');
    registerBtn.textContent = 'Register';
    registerBtn.onclick = function() {
        if (event.seats > 0) {
            event.seats--;
            seats.textContent = `Seats available: ${event.seats}`;
            alert(`Registered for ${event.name}!`);
        } else {
            alert('Event is full!');
        }
    };
    
    card.appendChild(title);
    card.appendChild(date);
    card.appendChild(seats);
    card.appendChild(registerBtn);
    
    return card;
}

// Display all events
function displayEvents(events) {
    eventsContainer.innerHTML = '';
    events.forEach(event => {
        if (event.checkAvailability()) {
            eventsContainer.appendChild(createEventCard(event));
        }
    });
}

// Initialize with sample events
const sampleEvents = [
    new Event("Bake Sale", new Date('2023-12-15'), 50, "Food"),
    new Event("Music Festival", new Date('2023-12-10'), 30, "Music")
];

displayEvents(sampleEvents);
8. Event Handling
javascript
// Search functionality
const searchInput = document.createElement('input');
searchInput.type = 'text';
searchInput.placeholder = 'Search events...';
document.body.insertBefore(searchInput, eventsContainer);

searchInput.addEventListener('keydown', function(e) {
    if (e.key === 'Enter') {
        const searchTerm = this.value.toLowerCase();
        const filtered = sampleEvents.filter(event => 
            event.name.toLowerCase().includes(searchTerm) && 
            event.checkAvailability()
        );
        displayEvents(filtered);
    }
});

// Category filter
const categoryFilter = document.createElement('select');
const categories = ['All', 'Food', 'Music', 'Art', 'Tech'];
categories.forEach(cat => {
    const option = document.createElement('option');
    option.value = cat;
    option.textContent = cat;
    categoryFilter.appendChild(option);
});
document.body.insertBefore(categoryFilter, eventsContainer);

categoryFilter.addEventListener('change', function() {
    const selectedCategory = this.value;
    if (selectedCategory === 'All') {
        displayEvents(sampleEvents);
    } else {
        const filtered = sampleEvents.filter(event => 
            event.category === selectedCategory && 
            event.checkAvailability()
        );
        displayEvents(filtered);
    }
});
9. Async JS, Promises, Async/Await
javascript
// Mock API URL
const MOCK_API_URL = 'https://mockapi.io/api/v1/events';

// Using .then() and .catch()
function fetchEventsThen() {
    const loadingSpinner = document.createElement('div');
    loadingSpinner.textContent = 'Loading events...';
    eventsContainer.appendChild(loadingSpinner);
    
    fetch(MOCK_API_URL)
        .then(response => {
            if (!response.ok) throw new Error('Network response was not ok');
            return response.json();
        })
        .then(events => {
            eventsContainer.removeChild(loadingSpinner);
            displayEvents(events);
        })
        .catch(error => {
            eventsContainer.removeChild(loadingSpinner);
            console.error('Error fetching events:', error);
            eventsContainer.textContent = 'Failed to load events. Please try again later.';
        });
}

// Using async/await
async function fetchEventsAsync() {
    const loadingSpinner = document.createElement('div');
    loadingSpinner.textContent = 'Loading events...';
    eventsContainer.appendChild(loadingSpinner);
    
    try {
        const response = await fetch(MOCK_API_URL);
        if (!response.ok) throw new Error('Network response was not ok');
        const events = await response.json();
        displayEvents(events);
    } catch (error) {
        console.error('Error fetching events:', error);
        eventsContainer.textContent = 'Failed to load events. Please try again later.';
    } finally {
        eventsContainer.removeChild(loadingSpinner);
    }
}

// For demonstration, we'll use a mock response
function mockFetch() {
    return new Promise(resolve => {
        setTimeout(() => {
            resolve({
                json: () => Promise.resolve([
                    new Event("Virtual Concert", new Date('2023-12-20'), 100, "Music"),
                    new Event("Food Fair", new Date('2023-12-18'), 80, "Food")
                ])
            });
        }, 1000);
    });
}

// Replace fetch with mockFetch for testing
window.fetch = mockFetch;
fetchEventsAsync();
10. Modern JavaScript Features
javascript
// Using modern features
function createEvent({ name = "New Event", date = new Date(), seats = 0, category = "General" } = {}) {
    return { name, date, seats, category };
}

// Using spread operator
function cloneEventList(events) {
    return [...events];
}

// Using destructuring
function displayEvent({ name, date, seats }) {
    console.log(`Event: ${name} on ${date.toDateString()} with ${seats} seats`);
}

// Example usage
const newEvent = createEvent({ name: "Poetry Reading", seats: 40 });
const clonedEvents = cloneEventList(sampleEvents);
displayEvent(newEvent);
11. Working with Forms
html
<form id="registrationForm">
    <h2>Event Registration</h2>
    <div>
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" required>
    </div>
    <div>
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
    </div>
    <div>
        <label for="event">Select Event:</label>
        <select id="event" name="event" required>
            <option value="">-- Select an event --</option>
            <option value="Bake Sale">Bake Sale</option>
            <option value="Music Festival">Music Festival</option>
        </select>
    </div>
    <button type="submit">Register</button>
    <div id="formErrors"></div>
</form>
javascript
// Form handling
const registrationForm = document.getElementById('registrationForm');
const formErrors = document.getElementById('formErrors');

registrationForm.addEventListener('submit', function(e) {
    e.preventDefault();
    formErrors.innerHTML = '';
    
    const { name, email, event } = this.elements;
    const errors = [];
    
    if (!name.value.trim()) errors.push('Name is required');
    if (!email.value.trim() || !email.value.includes('@')) errors.push('Valid email is required');
    if (!event.value) errors.push('Please select an event');
    
    if (errors.length > 0) {
        errors.forEach(error => {
            const errorElement = document.createElement('p');
            errorElement.textContent = error;
            errorElement.className = 'error';
            formErrors.appendChild(errorElement);
        });
    } else {
        alert(`Registration successful for ${event.value}! Confirmation sent to ${email.value}`);
        this.reset();
    }
});
12. AJAX & Fetch API
javascript
// Mock API for registration
const MOCK_REGISTRATION_API = 'https://mockapi.io/api/v1/registrations';

function registerUser(userData) {
    const loadingMessage = document.createElement('p');
    loadingMessage.textContent = 'Processing registration...';
    formErrors.appendChild(loadingMessage);
    
    fetch(MOCK_REGISTRATION_API, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(userData)
    })
    .then(response => {
        if (!response.ok) throw new Error('Registration failed');
        return response.json();
    })
    .then(data => {
        formErrors.removeChild(loadingMessage);
        const successMsg = document.createElement('p');
        successMsg.textContent = 'Registration successful!';
        successMsg.className = 'success';
        formErrors.appendChild(successMsg);
    })
    .catch(error => {
        formErrors.removeChild(loadingMessage);
        const errorMsg = document.createElement('p');
        errorMsg.textContent = 'Registration failed. Please try again.';
        errorMsg.className = 'error';
        formErrors.appendChild(errorMsg);
        console.error('Error:', error);
    });
}

// Update form submit handler to use fetch
registrationForm.addEventListener('submit', function(e) {
    e.preventDefault();
    formErrors.innerHTML = '';
    
    const { name, email, event } = this.elements;
    const errors = [];
    
    if (!name.value.trim()) errors.push('Name is required');
    if (!email.value.trim() || !email.value.includes('@')) errors.push('Valid email is required');
    if (!event.value) errors.push('Please select an event');
    
    if (errors.length > 0) {
        errors.forEach(error => {
            const errorElement = document.createElement('p');
            errorElement.textContent = error;
            errorElement.className = 'error';
            formErrors.appendChild(errorElement);
        });
    } else {
        const userData = {
            name: name.value,
            email: email.value,
            event: event.value,
            registeredAt: new Date().toISOString()
        };
        registerUser(userData);
    }
});
13. Debugging and Testing
javascript
// Debugging techniques
function debugRegistrationProcess() {
    // 1. Use console.log for step-by-step tracking
    console.log('Starting registration process...');
    
    // 2. Check form values
    const form = document.getElementById('registrationForm');
    console.log('Form elements:', form.elements);
    
    // 3. Verify fetch request
    const originalFetch = window.fetch;
    window.fetch = function(url, options) {
        console.log('Fetch request to:', url);
        console.log('Options:', options);
        return originalFetch(url, options)
            .then(response => {
                console.log('Response status:', response.status);
                return response;
            });
    };
    
    // 4. Add error boundaries
    try {
        // Code that might fail
    } catch (error) {
        console.error('Registration error:', error);
        // Display user-friendly message
    }
    
    // 5. Use browser DevTools:
    // - Set breakpoints in Sources tab
    // - Monitor Network requests
    // - Check Console for errors
    // - Inspect elements in Elements tab
}

// To test, call this function when needed
// debugRegistrationProcess();
14. jQuery and JS Frameworks
html
<!-- Add jQuery to your HTML -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
javascript
// jQuery implementation
$(document).ready(function() {
    // Handle register button click
    $('#registerBtn').click(function() {
        alert('Registration button clicked with jQuery!');
    });
    
    // Fade in event cards
    $('.event-card').hide().fadeIn(1000);
    
    // Benefits of frameworks:
    // - React/Vue provide component-based architecture for better organization
    // - Virtual DOM for efficient updates
    // - State management solutions
    // - Rich ecosystem of tools and libraries
    // - Better developer experience with hot reloading, etc.
});

// Note: For a complete React/Vue implementation, you would typically:
// 1. Set up a project with create-react-app or Vue CLI
// 2. Create components for events, registration form, etc.
// 3. Manage state with React hooks or Vue's reactive system
// 4. Handle routing if needed
// 5. Build and deploy the optimized application
Complete CSS for Styling (Optional)
css
/* Add this to a separate CSS file or style tag */
body {
    font-family: Arial, sans-serif;
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
}

.event-card {
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
    background-color: #f9f9f9;
}

.event-card h3 {
    margin-top: 0;
    color: #2c3e50;
}

button {
    background-color: #3498db;
    color: white;
    border: none;
    padding: 8px 15px;
    border-radius: 4px;
    cursor: pointer;
}

button:hover {
    background-color: #2980b9;
}

.error {
    color: #e74c3c;
    margin: 5px 0;
}

.success {
    color: #27ae60;
    margin: 5px 0;
}

#registrationForm {
    margin-top: 30px;
    padding: 20px;
    background-color: #f0f0f0;
    border-radius: 8px;
}

#registrationForm div {
    margin-bottom: 15px;
}

#registrationForm label {
    display: inline-block;
    width: 100px;
}

#registrationForm input, 
#registrationForm select {
    padding: 8px;
    width: 200px;
    border: 1px solid #ddd;
    border-radius: 4px;
}
